include: 'preflight'

rule all_other_datasets:
  input:
    # Bonev et al
    expand('results/other_datasets/bonev/GSE96107_{sample}.bw',sample = config['bonev']['samples'].keys()),
    # Matsuda et al
    expand('results/other_datasets/matsuda/GSM2800523_{sample}.bw',sample = config['matsuda']['samples'].keys()),
    # Zhao et al.
    'results/other_datasets/zhao/GSM3214323_mouse_OPC_H3K4me3chIP-seq_control.bw',
    # mESC Encode
    expand('results/other_datasets/mESC_ENCODE/bigwig/{sample}.bw',sample = ['mESC_rep1','mESC_rep2']),
    'results/other_datasets/mESC_ENCODE/peaks/ENCFF105NKG.bed',
    # 3T3
    expand("results/other_datasets/3T3_cells/bigwig/{sample}.bw",sample = config['3T3']['samples'].values()),
    'results/other_datasets/3T3_cells/macs/3T3_peaks.narrowPeak',
    # Oli-neu
    
    'results/other_datasets/Oli-neu/macs/Oli-neu_peaks.narrowPeak',
    # Fingerprint analyis bulk data
    "results/other_datasets/fingerprint_analysis/brain_bulk_fingerprint.npz",
    "results/other_datasets/fingerprint_analysis/brain_bulk_fingerprint.txt",
    

rule download_bonev:
  params:
    url    = lambda wildcards: config['bonev']['samples']['CN_' + wildcards.sample],
    outdir = 'results/other_datasets/bonev/'
  output:
    'results/other_datasets/bonev/GSE96107_CN_{sample}.bw'
  shell:
    "wget -P {params.outdir} {params.url}"

rule download_matsuda:
  params:
    url    = lambda wildcards: config['matsuda']['samples']['microglia_H3K27me3'],
  output:
    'results/other_datasets/matsuda/GSM2800523_{sample}.bw'
  shell:
    "wget -O {output} {params.url}"

rule download_zhao:
  params:
    url    = lambda wildcards: config['zhao']['samples']['OPCs_H3K4me3'],
    outdir = 'results/other_datasets/zhao/'
  output:
    'results/other_datasets/zhao/GSM3214323_mouse_OPC_H3K4me3chIP-seq_control.wig.gz'
  shell:
    "wget -P {params.outdir} {params.url}"

rule zhao_wig_to_bw:
  input:
    'results/other_datasets/zhao/GSM3214323_mouse_OPC_H3K4me3chIP-seq_control.wig.gz'
  output:
    'results/other_datasets/zhao/GSM3214323_mouse_OPC_H3K4me3chIP-seq_control.bw'
  params:
    outdir       = 'results/other_datasets/zhao/',
    gunziped_wig = 'results/other_datasets/zhao/GSM3214323_mouse_OPC_H3K4me3chIP-seq_control.wig',
    chromSizes   = 'results/other_datasets/zhao/mm10.chromSizes'
  shell:
    'fetchChromSizes mm10 > {params.chromSizes}; '
    'gunzip {input}; '
    'wigToBigWig -clip {params.gunziped_wig} {params.chromSizes} {output}; '

# mESC
rule downlod_mES:
  output:
    bam1 = 'results/other_datasets/mESC_ENCODE/bam/ENCFF359LIR.bam',
    bam2 = 'results/other_datasets/mESC_ENCODE/bam/ENCFF129XSB.bam'
  params:
    outdir = 'results/other_datasets/mESC_ENCODE/bam/',
    url1   = config['mESC']['samples']['rep1'],
    url2   = config['mESC']['samples']['rep2'],
  shell:
    """
    wget -P {params.outdir} {params.url1} {params.url2}
    """

rule rename_the_download:
  input:
    bam1 = 'results/other_datasets/mESC_ENCODE/bam/ENCFF359LIR.bam',
    bam2 = 'results/other_datasets/mESC_ENCODE/bam/ENCFF129XSB.bam'
  output:
    bam1 = 'results/other_datasets/mESC_ENCODE/bam/mESC_rep1.bam',
    bam2 = 'results/other_datasets/mESC_ENCODE/bam/mESC_rep2.bam'
  shell:
    """
    mv {input.bam1} {output.bam1}; 
    mv {input.bam2} {output.bam2}; 
    samtools index {output.bam1}; 
    samtools index {output.bam2};
    """

rule mES_bam_to_bw:
  input:
    'results/other_datasets/mESC_ENCODE/bam/{sample}.bam'
  output:
    'results/other_datasets/mESC_ENCODE/bigwig/{sample}.bw'
  threads: 8
  shell:
    "bamCoverage -b {input} -o {output} --binSize 10 -p {threads}"

rule download_peaks_mES:
  output:
    'results/other_datasets/mESC_ENCODE/peaks/ENCFF105NKG.bed'
  params:
    url = config['mESC']['peaks'],
    outdir = 'results/other_datasets/mESC_ENCODE/peaks/'
  shell:
    """
    wget -P {params.outdir} {params.url} && gunzip {output}.gz
    """

############# 3T3 cells

rule fastq_dump_3T3:
  output:
    fastq_1 = "results/other_datasets/3T3_cells/fastq/{sample}_1.fastq.gz",
    fastq_2 = "results/other_datasets/3T3_cells/fastq/{sample}_2.fastq.gz",
  params:
    SRA = "{sample}",
    out_dir = "results/other_datasets/3T3_cells/fastq/"
  threads: 8
  shell:
    """
    fasterq-dump --split-files --threads {threads} --progress --outdir {params.out_dir} {params.SRA} && gzip {params.out_dir}/{wildcards.sample}*.fastq
    """

rule trim_3T3:
  input:
    fastq_1 = "results/other_datasets/3T3_cells/fastq/{sample}_1.fastq.gz",
    fastq_2 = "results/other_datasets/3T3_cells/fastq/{sample}_2.fastq.gz",
  output:
    fastq_1 = "results/other_datasets/3T3_cells/fastq/{sample}_1_val_1.fq.gz",
    fastq_2 = "results/other_datasets/3T3_cells/fastq/{sample}_2_val_2.fq.gz",
  params:
    outdir  = "results/other_datasets/3T3_cells/fastq/"
  threads: 8
  shell:
    "trim_galore -j {threads} -o {params.outdir} --paired {input.fastq_1} {input.fastq_2}"

rule map_3T3:
  input:
    fastq_1 = "results/other_datasets/3T3_cells/fastq/{sample}_1_val_1.fq.gz",
    fastq_2 = "results/other_datasets/3T3_cells/fastq/{sample}_2_val_2.fq.gz",
  output:
    bam        = "results/other_datasets/3T3_cells/bam/{sample}.bam"
  threads: 8
  params:
    mm10_index = "/data/proj/GCB_MB/reference/bowtie2_index/mm10/mm10"
  shell:
    "bowtie2 --dovetail -p {threads} -1 {input.fastq_1} -2 {input.fastq_2} -x {params.mm10_index} | samtools view -bS - > {output}"
    
rule sort_bam_3T3:
  input:
    bam        = "results/other_datasets/3T3_cells/bam/{sample}.bam"
  output:
    bam        = "results/other_datasets/3T3_cells/possorted_bam/{sample}.bam"
  threads: 8
  shell:
    "samtools sort -@ {threads} -o {output} {input} && samtools index {output}"
  
rule bam_to_bw_3T3:
  input:
    bam = "results/other_datasets/3T3_cells/possorted_bam/{sample}.bam"
  output:
    bam = "results/other_datasets/3T3_cells/bigwig/{sample}.bw"
  threads: 8
  shell:
    "bamCoverage -b {input} -o {output} --binSize 10 -p {threads}"
    
rule call_peaks_3T3:
  input:
    expand("results/other_datasets/3T3_cells/possorted_bam/{sample}.bam",sample = [x for x in config['3T3']['samples'].values()])
  output:
    'results/other_datasets/3T3_cells/macs/3T3_peaks.narrowPeak'
  params:
    outdir = 'results/other_datasets/3T3_cells/macs/',
    name   = '3T3'
  shell:
    "macs2 callpeak -t {input} -g mm -f BAMPE -n {params.name} --outdir {params.outdir} --nomodel --shift 100 --extsize 200"


# Call peaks bulk C&R Oli-neu

rule call_peaks_oli_neu:
  input:
    config['CR_GCB']['Oli-neu']['bam']
  output:
    'results/other_datasets/Oli-neu/macs/Oli-neu_peaks.narrowPeak',
    'results/other_datasets/Oli-neu/macs/Oli-neu_summits.bed',
  params:
    outdir = 'results/other_datasets/Oli-neu/macs/',
    name   = 'Oli-neu'
  shell:
    "macs2 callpeak -t {input} -g mm -f BAMPE -n {params.name} --outdir {params.outdir} --nomodel --nolambda"


rule fingerprint_bulk:
  input:
    expand("{sample}", sample = [config['CR_GCB']['OPC']['bigwig'], "results/other_datasets/matsuda/GSM2800523_microglia_H3K27me3.bw", "results/other_datasets/bonev/GSE96107_CN_H3K27me3.bw"]) 
  output:
    np     = "results/other_datasets/fingerprint_analysis/brain_bulk_fingerprint.npz",
    matrix = "results/other_datasets/fingerprint_analysis/brain_bulk_fingerprint.txt",
  params:
  threads: 8
  shell:
    "multiBigwigSummary bins -o {output.np} --outRawCounts {output.matrix} -b {input} -p {threads}"












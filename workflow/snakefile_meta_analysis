include: 'preflight'
include: 'snakefile_preprocess'
include: 'snakefile_clustering'
include: 'snakefile_other_datasets'
include: 'snakefile_kaya_okur'



rule bam_files_all:
  input:
    # H3K27me3 fingerprint analysis
    expand("results/{antibody}/fingerprint_analysis/scCT_{antibody}_fingerprint.txt",antibody = ["H3K27me3"]),
    # FriP analysis for revision
    expand("results/other_datasets/frip_analysis/kaya_okur/{sample}/all_fragments.txt",sample=['K562_H3K27me3_iCell8','K562_H3K4me2_iCell8','H1_H3K27me3_iCell8']),
    expand("results/other_datasets/frip_analysis/scCT/{sample}/all_fragments.txt",antibody="H3K27me3",sample=["H3K27me3_N" + str(x) for x in [1,2,3,4]] + ["H3K27me3_cell_lines_1","H3K27me3_cell_lines_2"]),
    # PCA analysis
    'results/other_datasets/PCA/PCA_table_cell_lines.npz',
    'results/other_datasets/PCA/PCA_table_brain.npz',
    # Meme motif analysis
    expand("results/{antibody}/macs/narrow/{antibody}_peaks.narrowPeak", antibody = ['Rad21','Olig2']),
    expand("results/{antibody}/motifs/MEME_{width}/out_{npeaks}", antibody = ['Rad21','Olig2'],width = [25,50,100,150,250], npeaks = [1000,5000,10000,25000,50000]),
    # Metagene plots
    expand("results/{antibody1}/metagene/{antibody2}/metagene_plot.png", antibody1 = ["H3K4me3","H3K27me3"],antibody2 = ["H3K4me3","H3K27me3"]),
    # Metagene RNA promoters
    expand('results/{antibody}/metagene/metagene_{RNA}_{type}.png',antibody = antibody_dict.keys() , RNA = ['Sten_RNA','Sox10_RNA'], type = ['genes_scaled','promoters']),

    

rule generate_fingerprint_heatmap_scCT:
  input:
    merged_bam        = "results/{antibody}/possorted_bam.bam",
    bam_index         = "results/{antibody}/possorted_bam.bam.bai",
    per_replicate_bam = expand("{cellranger}/outs/possorted_bam.bam",cellranger = [config['samples'][x]['cellranger_out'] for x in config['samples'] if config['samples'][x]['Antibody'] == "H3K27me3"]),
    per_cluster_bam   = lambda wildcards: expand("results/{antibody}/clustering/bam_per_cluster/bam_merged/{cluster}.bam", \
                                cluster = list(set([re.sub("_rep.*.bam","",os.path.basename(x)) for x in glob.glob('results/' + wildcards.antibody + '/clustering/bam_per_cluster/bam/*.bam')])), \
                                antibody = wildcards.antibody)
  output:
    "results/{antibody}/fingerprint_analysis/scCT_{antibody}_fingerprint.txt"
  threads: 16
  params:
    per_cluster_bam = 'results/{antibody}/clustering/bam_per_cluster/bam_merged/*.bam'
  shell:
    """
      plotFingerprint --ignoreDuplicates --outRawCounts {output} -b {input.merged_bam} {input.per_replicate_bam} {input.per_cluster_bam} -p {threads}
    """

# FrIP analysis

rule call_peaks_scCT_FrIP:
  input:
    bam = lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/possorted_bam.bam'
  output:
    directory("results/other_datasets/frip_analysis/scCT/{sample}/macs/")
  params:
    outdir = directory("results/other_datasets/frip_analysis/scCT/{sample}/macs/"),
    name   = "{sample}"
  shell:
    "macs2 callpeak -t {input.bam} -g mm -f BAM --outdir {params.outdir} --nomodel -n {params.name} --max-gap 2500 --nolambda --slocal 1000000 --llocal 1000000"



rule intersect_fragments_with_peaks:
  input:
    peaks = "results/other_datasets/frip_analysis/scCT/{sample}/macs/",
    fragments = "results/{sample}/outs/fragments.tsv.gz",
  output:
    all_fragments  = "results/other_datasets/frip_analysis/scCT/{sample}/all_fragments.txt",
    peak_fragments = "results/other_datasets/frip_analysis/scCT/{sample}/peak_fragments.txt",
  params:
      sample = "{sample}"
  shell:
    """
    zcat {input.fragments} | cut -f4 | sort | uniq -c > {output.all_fragments} 
    bedtools intersect -a {input.fragments} -b {input.peaks}{params.sample}_peaks.narrowPeak -wa | cut -f4 | sort | uniq -c > {output.peak_fragments}
    """

# PCA analysis
rule PCA:
  input:
    scCT_bigwig        = "results/H3K27me3/clustering/bigwig/",
    markers_brain      = 'results/H3K27me3/clustering/markers_bed/',
    markers_cell_lines = 'results/H3K27me3_cell_lines/clustering/markers_bed/',
    cell_lines         = "results/H3K27me3_cell_lines/clustering/bigwig/",
    bonev_CN           = "results/other_datasets/bonev/GSE96107_CN_H3K27me3.bw",
    matsuda_MGL        = "results/other_datasets/matsuda/GSM2800523_microglia_H3K27me3.bw",
    OPCs_GCB           = config['CR_GCB']['OPC']['bigwig'],     # Deposit to GEO and fix link
    Oli_neu_GCB        = config['CR_GCB']['Oli-neu']['bigwig'],   # Deposit to GEO and fix link
    mESC_bigwig_1      = 'results/other_datasets/mESC_ENCODE/bigwig/mESC_rep1.bw',
    mESC_bigwig_2      = 'results/other_datasets/mESC_ENCODE/bigwig/mESC_rep2.bw',
    cells_3T3_rep1     = 'results/other_datasets/3T3_cells/bigwig/SRR9889940.bw',
    cells_3T3_rep2     = 'results/other_datasets/3T3_cells/bigwig/SRR9889941.bw',
  output:
    table_cell_lines   = 'results/other_datasets/PCA/PCA_table_cell_lines.npz',
    table_brain        = 'results/other_datasets/PCA/PCA_table_brain.npz',
    markers_cell_lines = 'results/other_datasets/PCA/markers_cell_lines.bed',
    markers_brain      = 'results/other_datasets/PCA/markers_brain.bed',
  shell:
    """
    ls {input.markers_cell_lines}/*.bed | while read line; do head -100 $line >> {output.markers_cell_lines}; done 
    ls {input.markers_brain}/*.bed | while read line; do head -100 $line >> {output.markers_brain}; done 
    multiBigwigSummary BED-file -b {input.cell_lines}/*.bw {input.Oli_neu_GCB} {input.mESC_bigwig_1} {input.mESC_bigwig_2} {input.cells_3T3_rep1} {input.cells_3T3_rep2} -o {output.table_cell_lines} --BED {output.markers_cell_lines} 
    multiBigwigSummary BED-file -b {input.scCT_bigwig}/*.bw {input.bonev_CN} {input.matsuda_MGL} {input.OPCs_GCB} -o {output.table_brain} --BED {output.markers_brain} 
    """


# Motif search
rule motif_search:
  input:
      peaks     = "results/{antibody}/macs/narrow/{antibody}_summits.bed",
      blacklist = "results/general/mm10.blacklist.bed.gz"
  output:
      meme_out           = directory("results/{antibody}/motifs/MEME_{width}/out_{npeaks}"),
  params:
      summits_filtered   = "results/{antibody}/motifs/MEME_{width}/summits_filtered_{npeaks}.bed",
      top_summits        = "results/{antibody}/motifs/MEME_{width}/top_summits_{npeaks}.bed",
      top_summits_padded = "results/{antibody}/motifs/MEME_{width}/top_summits_padded_{npeaks}.bed",
      top_summits_fa     = "results/{antibody}/motifs/MEME_{width}/top_summits_{npeaks}.fa",
      genome_fa          = config['db']['genome_fa'],
      npeaks             = "{npeaks}",
      #out                = "results/merged/{antibody}/MEME_{width}/out_{npeaks}",
  shell:
#      "set +o pipefail;"
      "cat {input.peaks} | grep -v -e 'chrM' | sort-bed - | bedops -n 1 - {input.blacklist} > {params.summits_filtered};"
      "sort -k5gr {params.summits_filtered} | head -{params.npeaks} | sort-bed - > {params.top_summits};"
      "bedops --range {wildcards.width} -u {params.top_summits} > {params.top_summits_padded};"
      "bedtools getfasta -fi {params.genome_fa} -bed {params.top_summits_padded} -fo {params.top_summits_fa};"
      "conda activate meme; " # MEME=5.1.1 env
      "meme-chip -oc {output.meme_out} -dreme-m 10 -meme-nmotifs 10 {params.top_summits_fa};"

######## METAGENE PLOTS
rule metagene:
  input:
    bw       = "results/{antibody1}/clustering/bigwig/",
    bed      = "results/{antibody2}/clustering/markers_bed/",
    bed_gene = "results/{antibody2}/clustering/markers_bed_genes/",
  output:
    matrix1 = "results/{antibody1}/metagene/{antibody2}/metagene_plot.txt.gz",
    png1    = "results/{antibody1}/metagene/{antibody2}/metagene_plot.png",
    matrix2 = "results/{antibody1}/metagene/{antibody2}/metagene_genes.txt.gz",
    png2    = "results/{antibody1}/metagene/{antibody2}/metagene_genes.png",
  threads: 10
  shell:
    "computeMatrix reference-point -S {input.bw}/*.bw -R {input.bed}/*.bed -o {output.matrix1} -a 10000 -b 10000 -p {threads} && "
    "plotHeatmap -m {output.matrix1} -o {output.png1} --sortRegions descend --refPointLabel peak --averageTypeSummaryPlot sum --colorList white,darkred --heatmapWidth 10  --heatmapHeight 80; "

    "computeMatrix scale-regions -S {input.bw}/*.bw -R {input.bed_gene}/*.bed -o {output.matrix2} -a 2000 -b 2000 -p {threads} && "
    "plotHeatmap -m {output.matrix2} -o {output.png2} --sortRegions descend --refPointLabel peak --averageTypeSummaryPlot sum --colorList white,darkred --heatmapWidth 10  --heatmapHeight 80; "


rule metagene_RNA_promoters:
  input:
    promoters  = 'results/{RNA}/clustering/markers_bed/',
    bigwig     = 'results/{antibody}/clustering/bigwig/',
  output:
    matrix   = 'results/{antibody}/metagene/metagene_{RNA}_promoters.txt.gz',
    png      = 'results/{antibody}/metagene/metagene_{RNA}_promoters.png',
    matrix2  = 'results/{antibody}/metagene/metagene_{RNA}_genes_scaled.txt.gz',
    png2     = 'results/{antibody}/metagene/metagene_{RNA}_genes_scaled.png',
  threads: 8
  shell:
    "computeMatrix reference-point -S {input.bigwig}/*.bw -R {input.promoters}/*_promoters.bed -o {output.matrix} -a 10000 -b 10000 -p {threads} && "
    "plotHeatmap -m {output.matrix} -o {output.png} --sortRegions descend --refPointLabel promoter --averageTypeSummaryPlot sum --colorList white,darkgreen --heatmapWidth 10  --heatmapHeight 80; "
    "computeMatrix scale-regions -S {input.bigwig}/*.bw -R {input.promoters}/*_genes.bed -o {output.matrix2} -a 2000 -b 2000 -p {threads} && "
    "plotHeatmap -m {output.matrix2} -o {output.png2} --sortRegions descend --refPointLabel promoter --averageTypeSummaryPlot sum --colorList white,darkgreen --heatmapWidth 10  --heatmapHeight 80; "

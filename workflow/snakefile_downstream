include: 'preflight'

rule downstream_all:
  input:
    "results/H3K27ac/cicero/cicero_image.Rdata",
    "results/H3K4me3/spreading/breadth.Rdata",
    "results/H3K4me3/spreading/spreading.Rdata",
    "results/H3K4me3/pseudotime/pseudotime_OLG_final.Rds",
    "results/integration/H3K4me3_RNA/H3K4me3_RNA_coembed.Rds",
    "results/H3K4me3/GO_terms/GO_matrix_markers.csv",
    expand("results/{antibody}/integration/integrated.Rds",antibody=['Olig2','Rad21']),
    
    
    
    
    

#######################################


# Motif search
rule motif_search:
  input:
      peaks     = "results/merged/{antibody}/macs/narrow/{antibody}_summits.bed",
      blacklist = "results/mm10.blacklist.bed.gz"
  output:
      meme_out           = directory("results/merged/{antibody}/MEME_{width}/out_{npeaks}"),
  params:
      summits_filtered   = "results/merged/{antibody}/MEME_{width}/summits_filtered_{npeaks}.bed",
      top_summits        = "results/merged/{antibody}/MEME_{width}/top_summits_{npeaks}.bed",
      top_summits_padded = "results/merged/{antibody}/MEME_{width}/top_summits_padded_{npeaks}.bed",
      top_summits_fa     = "results/merged/{antibody}/MEME_{width}/top_summits_{npeaks}.fa",
      genome_fa          = config['db']['genome_fa'],
      npeaks             = "{npeaks}",
      #out                = "results/merged/{antibody}/MEME_{width}/out_{npeaks}",
  shell:
#      "set +o pipefail;"
      "cat {input.peaks} | grep -v -e 'chrM' | sort-bed - | bedops -n 1 - {input.blacklist} > {params.summits_filtered};"
      "sort -k5gr {params.summits_filtered} | head -{params.npeaks} | sort-bed - > {params.top_summits};"
      "bedops --range {wildcards.width} -u {params.top_summits} > {params.top_summits_padded};"
      "bedtools getfasta -fi {params.genome_fa} -bed {params.top_summits_padded} -fo {params.top_summits_fa};"
      "conda activate meme; " # MEME=5.1.1 env
      "meme-chip -oc {output.meme_out} -dreme-m 10 -meme-nmotifs 10 {params.top_summits_fa};"


###########################################################
################### DOWNSTREAM ANALYSIS ###################
###########################################################

rule call_peaks_bam_per_cluster:
  input:
    lambda wildcards: expand('results/{antibody}/clustering/bam_per_cluster/{sample}/',sample = antibody_dict[wildcards.antibody],antibody = wildcards.antibody),
  output:
   'results/{antibody}/clustering/bam_per_cluster/macs_broad/{cluster}/{cluster}_peaks.broadPeak',
  params:
    bam_files = lambda wildcards: expand('results/{antibody}/clustering/bam_per_cluster/{sample}/{cluster}_out.bam',sample = antibody_dict[wildcards.antibody],antibody = wildcards.antibody,cluster = wildcards.cluster),
    outdir    = 'results/{antibody}/clustering/bam_per_cluster/macs_broad/{cluster}'
  shell:
    "macs2 callpeak -t {params.bam_files}  \
  -n {wildcards.cluster} \
  -f BAMPE \
  -g mm \
  --qvalue 1e-10 \
  --outdir {params.outdir} \
  --broad \
  --bdg \
  --max-gap 1000 \
  --min-length 500 \
  --broad-cutoff 0.001 \
  --llocal 1000000 \
  --slocal 0"





rule markers_to_gene:
  input:
    markers  = 'results/{antibody}/clustering/markers.csv'
  output:
    directory('results/{antibody}/clustering/markers_bed_genes/')
  params:
    script = os.path.dirname(workflow.basedir) + "/scripts/R/markers_to_bed.R"
  shell:
    "Rscript {params.script} {input.markers} {output}"


######## METAGENE PLOTS
rule metagene:
  input:
    bw       = "results/{antibody1}/clustering/bigwig/",
    bed      = "results/{antibody2}/clustering/markers_bed/",
    bed_gene = "results/{antibody2}/clustering/markers_bed_genes/",
  output:
    matrix1 = "results/{antibody1}/metagene/{antibody2}/metagene_plot.txt.gz",
    png1    = "results/{antibody1}/metagene/{antibody2}/metagene_plot.png",
    matrix2 = "results/{antibody1}/metagene/{antibody2}/metagene_genes.txt.gz",
    png2    = "results/{antibody1}/metagene/{antibody2}/metagene_genes.png",
  threads: 8
  shell:
    "computeMatrix reference-point -S {input.bw}*.bw -R {input.bed}*.bed -o {output.matrix1} -a 10000 -b 10000 -p {threads} &&"
    "plotHeatmap -m {output.matrix1} -o {output.png1} --sortRegions descend --refPointLabel peak --averageTypeSummaryPlot sum --colorList white,darkred --heatmapWidth 10  --heatmapHeight 80; "
    
    "computeMatrix scale-regions -S {input.bw}*.bw -R {input.bed_gene}*.bed -o {output.matrix2} -a 2000 -b 2000 -p {threads} &&"
    "plotHeatmap -m {output.matrix2} -o {output.png2} --sortRegions descend --refPointLabel peak --averageTypeSummaryPlot sum --colorList white,darkred --heatmapWidth 10  --heatmapHeight 80; "



rule metagene_RNA_promoters:
  input:
    promoters  = 'results/{RNA}/marker_promoters/',
    bigwig     = 'results/{antibody}/clustering/bigwig/',
  output:
    matrix   = 'results/{antibody}/metagene/metagene_{RNA}_promoters.txt.gz',
    png      = 'results/{antibody}/metagene/metagene_{RNA}_promoters.png',
    matrix2  = 'results/{antibody}/metagene/metagene_{RNA}_genes_scaled.txt.gz',
    png2     = 'results/{antibody}/metagene/metagene_{RNA}_genes_scaled.png',
  threads: 8
  shell:
    "computeMatrix reference-point -S {input.bigwig}*.bw -R {input.promoters}*_promoters.bed -o {output.matrix} -a 10000 -b 10000 -p {threads} && "
    "plotHeatmap -m {output.matrix} -o {output.png} --sortRegions descend --refPointLabel promoter --averageTypeSummaryPlot sum --colorList white,darkgreen --heatmapWidth 10  --heatmapHeight 80; "
    "computeMatrix scale-regions -S {input.bigwig}*.bw -R {input.promoters}*_genes.bed -o {output.matrix2} -a 2000 -b 2000 -p {threads} && "
    "plotHeatmap -m {output.matrix2} -o {output.png2} --sortRegions descend --refPointLabel promoter --averageTypeSummaryPlot sum --colorList white,darkgreen --heatmapWidth 10  --heatmapHeight 80; "

rule export_bam_per_cluster: 
  input:
    bam   = lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/possorted_bam.bam',
    table = 'results/{antibody}/clustering/bam_per_cluster/cluster_barcode_table.csv',
  output:
    sam_files  = directory('results/{antibody}/clustering/bam_per_cluster/{sample}/'),
  params:
    filter_bam          =   os.path.dirname(workflow.basedir) + "/scripts/filter_bam_by_barcode.py",
    sample              =   lambda wildcards: wildcards.sample,
  shell:
    "python3 {params.filter_bam} {input.bam} {input.table} {params.sample} {output.sam_files}; "

###### Integration 3 active marks
rule integration_active:
  input:
    "results/H3K4me3/clustering/01.clustering.Rds",
    "results/H3K27ac/clustering/01.clustering.Rds",
    "results/H3K36me3/clustering/01.clustering.Rds",
    notebook = os.path.dirname(workflow.basedir) + "/notebooks/integration/integration_3active.Rmd",
  output:
    "results/integration/histone_3active/histone_3active_integrated.Rds",
  params:
    report     = CWD + "/results/integration/histone_3active/Histone_3active_integrated.html",
    out_prefix = CWD + "/results/"
  shell:
    "Rscript -e \"rmarkdown::render(input='{input.notebook}',output_file = '{params.report}', params=list(out_prefix = '{params.out_prefix}'))\" "
    
######## Olig2 and Rad21

rule integration_olig2_rad21:
  input:
    'results/{antibody}/clustering/01.clustering.Rds',
    'results/H3K27ac/clustering/01.clustering.Rds',
    notebook = os.path.dirname(workflow.basedir) + "/notebooks/{antibody}/Integration_H3K27ac.Rmd",
  output:
    'results/{antibody}/integration/integrated.Rds',
    directory('results/{antibody}/integration/bigwig/')
  params:
    report         = CWD + '/results/{antibody}/integration/integrated.html',
    out_prefix     = CWD + '/results/'
  shell:
    "Rscript -e \"rmarkdown::render(input='{input.notebook}',output_file='{params.report}',params=list(out_prefix='{params.out_prefix}')) \""


###### H3K4me3 GO analysis
rule GO_H3K4me3:
  input:
    seurat  = "results/H3K4me3/clustering/01.clustering.Rds",
    markers = "results/H3K4me3/clustering/markers.csv",
  output:
    'results/H3K4me3/GO_terms/GO_matrix_markers.csv',
  params:
    notebook   = os.path.dirname(workflow.basedir) + "/notebooks/H3K4me3/GO_analysis.Rmd",
    report     = CWD + '/results/H3K4me3/GO_terms/GO_analysis.html',
    out_prefix = CWD + '/results/'
  shell:
    "Rscript -e \"rmarkdown::render(input='{params.notebook}',output_file='{params.report}',params=list(out_prefix='{params.out_prefix}')) \""


####### H3K4me4 RNA integration
rule H3K4me3_Sten_integrate:
  input:
    'results/H3K4me3/clustering/01.clustering.Rds',
    'results/Sten_RNA/clustering/01.clustering_20000cells.Rds',
    notebook = os.path.dirname(workflow.basedir) + '/notebooks/integration/integration_H3K4me3_RNA.Rmd',
  output:
    'results/integration/H3K4me3_RNA/H3K4me3_RNA_coembed.Rds'
  params:
    report = CWD + '/results/integration/H3K4me3_RNA/H3K4me3_RNA_coembed.html',
    out_prefix = CWD + '/results/'
  shell:
    "Rscript -e \"rmarkdown::render(input='{input.notebook}',output_file = '{params.report}', params=list(out_prefix = '{params.out_prefix}'))\""

###### H3K4me3 pseudotime
rule pseudotime:
  input:
    seurat   = 'results/H3K4me3/clustering/01.clustering.Rds',
    notebook = os.path.dirname(workflow.basedir) + '/notebooks/H3K4me3/pseudotime.Rmd',
  output:
    'results/H3K4me3/pseudotime/pseudotime_OLG_final.Rds',
    'results/H3K4me3/pseudotime/pseudotime_OLG_slingshot.Rds'
  params:
    out_prefix = CWD + '/results/',
    report     = CWD + '/results/H3K4me3/pseudotime/pseudotime_final.html',
  shell:
    "Rscript -e \"rmarkdown::render(input='{input.notebook}',output_file = '{params.report}', params=list(out_prefix = '{params.out_prefix}'))\""


######### H3K4me3 spreading

rule spreading_H3K4me3:
  input:
    "results/H3K4me3/clustering/01.clustering.Rds",
    "results/H3K4me3/pseudotime/pseudotime_OLG_final.Rds",
    "results/H3K4me3/pseudotime/pseudotime_OLG_slingshot.Rds",
    "results/merged/H3K4me3/fragments.tsv.gz",
    "results/Sox10_RNA/clustering/GFP/markers.csv",
    "results/merged/H3K4me3/macs/broad/H3K4me3_peaks.broadPeak",
    notebook = os.path.dirname(workflow.basedir) + '/notebooks/H3K4me3/spreading.Rmd',
  output:
    "results/H3K4me3/spreading/spreading.Rdata",
  params:
    out_prefix = CWD + "/results/",
    report     = CWD + "/results/H3K4me3/spreading/spreading.html",
  shell:
    "Rscript -e \"rmarkdown::render(input='{input.notebook}',output_file = '{params.report}', params=list(out_prefix = '{params.out_prefix}'))\""

rule breadth_H3K4me3:
  input:
    # Cellranger peaks.bed file
    lambda wildcards: ['results/' + x + '/outs/fragments.tsv.gz' for x in antibody_dict[wildcards.antibody] ],
    'results/Sox10_RNA/clustering/GFP/markers.csv',
    notebook = os.path.dirname(workflow.basedir) + '/notebooks/H3K4me3/breadth.Rmd',
  output:
    "results/{antibody}/spreading/breadth.Rdata",
  params:
    report = CWD + "/results/{antibody}/spreading/breadth.html",
    out_prefix = CWD + '/results/'
  shell:
    "Rscript -e \"rmarkdown::render(input='{input.notebook}',output_file = '{params.report}', params=list(out_prefix = '{params.out_prefix}'))\""    


# Olig2 chromvar - not used in the end 
rule chromvar:
  input:
    'results/{antibody}/clustering/01.clustering.Rds',
    'results/merged/{antibody}/fragments.tsv.gz',
    'results/merged/{antibody}/macs/narrow/{antibody}_summits.bed',
    notebook = os.path.dirname(workflow.basedir) + '/notebooks/{antibody}/chromVAR.Rmd',
  output:
    'results/{antibody}/chromVAR/chromVAR.Rdata',
  params:
    report      = CWD + '/results/{antibody}/chromVAR/chromVAR.html',
    out_prefix  = CWD + '/results/',
  shell:
    "Rscript -e \"rmarkdown::render(input='{input.notebook}',output_file = '{params.report}', params=list(out_prefix = '{params.out_prefix}'))\""    


# H3K27ac cicero

rule cicero:
  input:
    'results/{antibody}/clustering/01.clustering.Rds',
#    directory('results/{antibody}/clustering/bam_per_cluster/H3K27ac_N1/'), # Fix this ?
#    directory('results/{antibody}/clustering/bam_per_cluster/H3K27ac_N2/'), # Fix this ?
    notebook = os.path.dirname(workflow.basedir) + '/notebooks/{antibody}/Cicero.Rmd',
  output:
    'results/{antibody}/cicero/cicero_image.Rdata',
    directory('results/{antibody}/cicero/loops/')
  params:
    report      = CWD + '/results/{antibody}/cicero/cicero.html',
    out_prefix  = CWD + '/results/',
  shell:
    "Rscript -e \"rmarkdown::render(input='{input.notebook}',output_file = '{params.report}', params=list(out_prefix = '{params.out_prefix}'))\""    



# TODO rule H3K4me3 integaration with marques RNA 


















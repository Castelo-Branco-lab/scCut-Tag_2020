import os
import sys
import glob

include: 'preflight'
include: 'snakefile_preprocess'
include: 'snakefile_clustering'
include: 'snakefile_kaya_okur'
include: 'snakefile_grosselin'
include: 'snakefile_integration'
include: 'snakefile_other_datasets'
include: 'snakefile_figures'
include: 'snakefile_scRNA-seq'
include: 'snakefile_downscale'
include: 'snakefile_meta_analysis'
# include: 'snakefile_downstream'

configfile: os.path.dirname(workflow.basedir) + '/config/config.yaml'

rule all:
  input:
    # Snakefile preprocess
    expand("results/{sample}/seurat/bin_{binwidth}/Seurat_object.Rds", sample = samples_dict.keys(),binwidth = config['general']['clustering_window']),
    expand("results/{sample}/bigwig/all_reads.bw", sample = samples_dict.keys()),
    expand("results/{sample}/macs/narrow/{sample}_peaks.narrowPeak", sample = samples_dict.keys()),
    expand("results/{sample}/macs/broad/{sample}_peaks.broadPeak", sample = samples_dict.keys()),
    expand("results/{sample}/outs/fragments.tsv.gz", sample = samples_dict.keys()),
    expand("results/{sample}/barcode_metrics/peaks_barcodes_broad.txt", sample = samples_dict.keys()),
    expand("results/{sample}/barcode_metrics/peaks_barcodes_narrow.txt", sample = samples_dict.keys()),
    expand("results/{sample}/barcode_metrics/all_barcodes.txt", sample = samples_dict.keys()),
    expand("results/{antibody}/fragments.tsv.gz", antibody = antibody_dict.keys()),
    expand("results/{antibody}/possorted_bam.bam", antibody = antibody_dict.keys()),
    expand("results/{antibody}/macs/narrow/{antibody}_summits.bed", antibody = antibody_dict.keys()),
    expand("results/{antibody}/macs/for_revision/{antibody}_peaks.narrowPeak", antibody = antibody_dict.keys()),
    expand("results/{antibody}/fragments.tsv.gz",antibody = antibody_dict.keys()),
  
    # SNakefile scATAC
    'results/scATAC_P50/clustering/clustering_scATAC.Rds',
    'results/scATAC_P50/clustering/bam_per_cluster/scATAC/',
    
    # Snakefile scRNA-seq
    'results/marques_RNA/clustering/01.clustering.Rds',
    'results/Sox10_RNA/clustering/GFP/01.clustering.Rds',
    'results/Sten_RNA/clustering/01.clustering_20000cells.Rds',
    expand('results/{RNA}/clustering/markers_bed/',RNA=["Sten_RNA","Sox10_RNA"]),
    'results/Sox10_RNA/clustering/GFP/RNA_expression_TPM.csv',
    'results/Sox10_RNA/integration/scRNA_integrated.Rds',
    
    
    # Snakefile Kaya-Okur
    expand("results/other_datasets/kaya_okur/bigwig/{sample}.bw",sample = config['kaya-okur']['samples']),
    expand("results/other_datasets/frip_analysis/kaya_okur/{sample}/all_fragments.txt",sample = config['kaya-okur']['samples']),
    "results/other_datasets/fingerprint_analysis/Kaya_okur_fingerprint.txt",
    
    # Snakefile clustering
    expand("results/{antibody}/clustering/01.clustering.Rds",antibody = antibody_dict.keys()),
    expand("results/{antibody}/clustering/bam_per_cluster/bed/", antibody = antibody_dict.keys()),
    expand("results/{antibody}/clustering/bam_per_cluster/bam/", antibody = antibody_dict.keys()),
    expand("results/{antibody}/clustering/bam_per_cluster/bigwig/", antibody = antibody_dict.keys()),
    [expand('results/{antibody}/clustering/bam_per_cluster/bam_merged/{cluster}.bam', \
      antibody = antibody, \
      cluster  = list(set([re.sub("_rep.*.bam","",os.path.basename(x)) for x in glob.glob('results/' + antibody + '/clustering/bam_per_cluster/bam/*.bam')]))) for antibody in antibody_list],
    [expand('results/{antibody}/clustering/bam_per_cluster/macs_broad/{cluster}/{cluster}_peaks.broadPeak',
      antibody = antibody, \
      cluster  = list(set([re.sub("_rep.*.bam","",os.path.basename(x)) for x in glob.glob('results/' + antibody + '/clustering/bam_per_cluster/bam/*.bam')]))) for antibody in antibody_list],
    expand('results/{antibody}/clustering/markers_bed_genes/',antibody = antibody_dict.keys()),
    expand("results/{antibody}/correlation_matrix/{antibody}_correlation_matrix.txt.gz",antibody = antibody_dict.keys()),
    
    # Snakefile downscale 
    expand('results/{antibody}/downsample/bam/fragments_{cluster}_{n}.bam', cluster=['mOL'], antibody=['H3K27ac'], n=[10,20,50,100,200,500,1000,2000,5000]),
    expand('results/{antibody}/downsample/bam/fragments_{sample}_{n}.bam',antibody = ['H3K27me3_cell_lines'], sample=['Oli-neu',"3T3","mESC"],n=[10,20,50,100,200,500,1000,2000,5000]),
    expand('results/{antibody}/downsample/bigwig/fragments_{sample}_{n}.bw',antibody = ['H3K27me3_cell_lines'], sample=['Oli-neu',"3T3","mESC"],n=[10,20,50,100,200,500,1000,2000,5000]),
    expand('results/other_datasets/downsample/bulk_bigwig/{sample}.bw',sample=['3T3','mESC']),
    expand("results/other_datasets/downsample/heatmap/{sample}_{s}_matrix.txt.gz",sample = ['3T3','mESC'], s = ['sc','bulk']),
    expand("results/other_datasets/downsample/heatmap/{sample}_{method}_matrix.png",sample = ['3T3','mESC','Oli-neu'],method=['sc','bulk']),
    
    # Snakefile meta_analysis
    expand("results/{antibody}/fingerprint_analysis/scCT_{antibody}_fingerprint.txt",antibody = ["H3K27me3"]),
    expand("results/other_datasets/frip_analysis/kaya_okur/{sample}/all_fragments.txt",sample=['K562_H3K27me3_iCell8','K562_H3K4me2_iCell8','H1_H3K27me3_iCell8']),
    expand("results/other_datasets/frip_analysis/scCT/{sample}/all_fragments.txt",antibody="H3K27me3",sample=["H3K27me3_N" + str(x) for x in [1,2,3,4]] + ["H3K27me3_cell_lines_1","H3K27me3_cell_lines_2"]),
    'results/other_datasets/PCA/PCA_table_cell_lines.npz',
    'results/other_datasets/PCA/PCA_table_brain.npz',
    expand("results/{antibody}/macs/narrow/{antibody}_peaks.narrowPeak", antibody = ['Rad21','Olig2']),
    expand("results/{antibody}/motifs/MEME_{width}/out_{npeaks}", antibody = ['Rad21','Olig2'],width = [25,50,100,150,250], npeaks = [1000,5000,10000,25000,50000]),
    expand("results/{antibody1}/metagene/{antibody2}/metagene_plot.png", antibody1 = ["H3K4me3","H3K27me3"],antibody2 = ["H3K4me3","H3K27me3"]),
    expand('results/{antibody}/metagene/metagene_{RNA}_{type}.png',antibody = antibody_dict.keys() , RNA = ['Sten_RNA','Sox10_RNA'], type = ['genes_scaled','promoters']),
    
    
    # Snakefile_other_datasets
    expand('results/other_datasets/bonev/GSE96107_{sample}.bw',sample = config['bonev']['samples'].keys()),
    expand('results/other_datasets/matsuda/GSM2800523_{sample}.bw',sample = config['matsuda']['samples'].keys()),
    'results/other_datasets/zhao/GSM3214323_mouse_OPC_H3K4me3chIP-seq_control.bw',
    expand('results/other_datasets/mESC_ENCODE/bigwig/{sample}.bw',sample = ['mESC_rep1','mESC_rep2']),
    'results/other_datasets/mESC_ENCODE/peaks/ENCFF105NKG.bed',
    expand("results/other_datasets/3T3_cells/bigwig/{sample}.bw",sample = config['3T3']['samples'].values()),
    'results/other_datasets/3T3_cells/macs/3T3_peaks.narrowPeak',
    'results/other_datasets/Oli-neu/macs/Oli-neu_peaks.narrowPeak',
    "results/other_datasets/fingerprint_analysis/brain_bulk_fingerprint.npz",
    "results/other_datasets/fingerprint_analysis/brain_bulk_fingerprint.txt",
    
    # Snakefile integration
    'results/integration/H3K4me3_RNA/H3K4me3_RNA_coembed.Rds',
    'results/integration/histone_3active/histone_3active_integrated.Rds',
    'results/other_datasets/PCA/PCA_table_cell_lines.npz',
    'results/other_datasets/PCA/PCA_table_brain.npz',
    expand('results/{antibody}/integration/integrated.Rds',antibody = ['Rad21','Olig2']),
    
    
    


# ###########################################################
# ################### DOWNSTREAM ANALYSIS ###################
# ###########################################################

######## METAGENE PLOTS
#
#
# rule export_bam_per_cluster:
#   input:
#     bam   = lambda wildcards: config['samples'][wildcards.sample]['cellranger_out'] + '/outs/possorted_bam.bam',
#     table = 'results/{antibody}/clustering/bam_per_cluster/cluster_barcode_table.csv',
#   output:
#     sam_files  = directory('results/{antibody}/clustering/bam_per_cluster/{sample}/'),
#   params:
#     filter_bam          =   os.path.dirname(workflow.basedir) + "/scripts/filter_bam_by_barcode.py",
#     sample              =   lambda wildcards: wildcards.sample,
#   shell:
#     "python3 {params.filter_bam} {input.bam} {input.table} {params.sample} {output.sam_files}; "
#
# ###### H3K4me3 GO analysis
# rule GO_H3K4me3:
#   input:
#     seurat  = "results/H3K4me3/clustering/01.clustering.Rds",
#     markers = "results/H3K4me3/clustering/markers.csv",
#   output:
#     'results/H3K4me3/GO_terms/GO_matrix_markers.csv',
#   params:
#     notebook   = os.path.dirname(workflow.basedir) + "/notebooks/H3K4me3/GO_analysis.Rmd",
#     report     = CWD + '/results/H3K4me3/GO_terms/GO_analysis.html',
#     out_prefix = CWD + '/results/'
#   shell:
#     "Rscript -e \"rmarkdown::render(input='{params.notebook}',output_file='{params.report}',params=list(out_prefix='{params.out_prefix}')) \""
#
#
# ###### H3K4me3 pseudotime
# rule pseudotime:
#   input:
#     seurat   = 'results/H3K4me3/clustering/01.clustering.Rds',
#     notebook = os.path.dirname(workflow.basedir) + '/notebooks/H3K4me3/pseudotime.Rmd',
#   output:
#     'results/H3K4me3/pseudotime/pseudotime_OLG_final.Rds',
#     'results/H3K4me3/pseudotime/pseudotime_OLG_slingshot.Rds'
#   params:
#     out_prefix = CWD + '/results/',
#     report     = CWD + '/results/H3K4me3/pseudotime/pseudotime_final.html',
#   shell:
#     "Rscript -e \"rmarkdown::render(input='{input.notebook}',output_file = '{params.report}', params=list(out_prefix = '{params.out_prefix}'))\""
#
#
# ######### H3K4me3 spreading
#
# rule spreading_H3K4me3:
#   input:
#     "results/H3K4me3/clustering/01.clustering.Rds",
#     "results/H3K4me3/pseudotime/pseudotime_OLG_final.Rds",
#     "results/H3K4me3/pseudotime/pseudotime_OLG_slingshot.Rds",
#     "results/merged/H3K4me3/fragments.tsv.gz",
#     "results/Sox10_RNA/clustering/GFP/markers.csv",
#     "results/merged/H3K4me3/macs/broad/H3K4me3_peaks.broadPeak",
#     notebook = os.path.dirname(workflow.basedir) + '/notebooks/H3K4me3/spreading.Rmd',
#   output:
#     "results/H3K4me3/spreading/spreading.Rdata",
#   params:
#     out_prefix = CWD + "/results/",
#     report     = CWD + "/results/H3K4me3/spreading/spreading.html",
#   shell:
#     "Rscript -e \"rmarkdown::render(input='{input.notebook}',output_file = '{params.report}', params=list(out_prefix = '{params.out_prefix}'))\""
#
# rule breadth_H3K4me3:
#   input:
#     # Cellranger peaks.bed file
#     lambda wildcards: ['results/' + x + '/outs/fragments.tsv.gz' for x in antibody_dict[wildcards.antibody] ],
#     'results/Sox10_RNA/clustering/GFP/markers.csv',
#     notebook = os.path.dirname(workflow.basedir) + '/notebooks/H3K4me3/breadth.Rmd',
#   output:
#     "results/{antibody}/spreading/breadth.Rdata",
#   params:
#     report = CWD + "/results/{antibody}/spreading/breadth.html",
#     out_prefix = CWD + '/results/'
#   shell:
#     "Rscript -e \"rmarkdown::render(input='{input.notebook}',output_file = '{params.report}', params=list(out_prefix = '{params.out_prefix}'))\""
#
#
# # Olig2 chromvar
# rule chromvar:
#   input:
#     'results/{antibody}/clustering/01.clustering.Rds',
#     'results/merged/{antibody}/fragments.tsv.gz',
#     'results/merged/{antibody}/macs/narrow/{antibody}_summits.bed',
#     notebook = os.path.dirname(workflow.basedir) + '/notebooks/{antibody}/chromVAR.Rmd',
#   output:
#     'results/{antibody}/chromVAR/chromVAR.Rdata',
#   params:
#     report      = CWD + '/results/{antibody}/chromVAR/chromVAR.html',
#     out_prefix  = CWD + '/results/',
#   shell:
#     "Rscript -e \"rmarkdown::render(input='{input.notebook}',output_file = '{params.report}', params=list(out_prefix = '{params.out_prefix}'))\""
#
#
# # H3K27ac cicero
#
# rule cicero:
#   input:
#     'results/{antibody}/clustering/01.clustering.Rds',
# #    directory('results/{antibody}/clustering/bam_per_cluster/H3K27ac_N1/'), # Fix this ?
# #    directory('results/{antibody}/clustering/bam_per_cluster/H3K27ac_N2/'), # Fix this ?
#     notebook = os.path.dirname(workflow.basedir) + '/notebooks/{antibody}/Cicero.Rmd',
#   output:
#     'results/{antibody}/cicero/cicero_image.Rdata',
#     directory('results/{antibody}/cicero/loops/')
#   params:
#     report      = CWD + '/results/{antibody}/cicero/cicero.html',
#     out_prefix  = CWD + '/results/',
#   shell:
#     "Rscript -e \"rmarkdown::render(input='{input.notebook}',output_file = '{params.report}', params=list(out_prefix = '{params.out_prefix}'))\""
#
#
#
# # TODO rule H3K4me3 integaration with marques RNA
#

















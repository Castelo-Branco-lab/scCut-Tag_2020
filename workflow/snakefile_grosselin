config_file = os.path.dirname(workflow.basedir) + '/config/config.yaml'
configfile: config_file
shell.prefix("source ~/.bashrc; conda activate " + config['general']['conda_env']  + " ; ")

rule prefetch:
  output:
    "/data/proj/GCB_MB/ncbi/tmp/sra/{sample}.sra"
  params:
    SRA  = "{sample}"
  shell:
    "prefetch {params.SRA}"
    
rule fastq_dump:
  input:
    "/data/proj/GCB_MB/ncbi/tmp/sra/{sample}.sra"
  output:
    fastq_1 = "results/other_datasets/grosselin_scChIP/{sample}/fastq/{sample}_1.fastq.gz",
    fastq_2 = "results/other_datasets/grosselin_scChIP/{sample}/fastq/{sample}_2.fastq.gz",
  params:
    SRA = "{sample}",
    out_dir = "results/other_datasets/grosselin_scChIP/{sample}/fastq/"
  shell:
    "fastq-dump --split-files --gzip --outdir {params.out_dir} {params.SRA}"

rule map_barcodes:
  input:
    fw="results/other_datasets/grosselin_scChIP/{sample}/fastq/{sample}_1.fastq.gz",
    rev="results/other_datasets/grosselin_scChIP/{sample}/fastq/{sample}_2.fastq.gz"
  output:
    barcodes="results/other_datasets/grosselin_scChIP/{sample}/barcodes/mapping/barcode/{sample}_read_barcodes.txt",
    #directory("{sample}/barcodes/"),
    dummy="results/other_datasets/grosselin_scChIP/{sample}/barcodes/out.txt",
    genome="results/other_datasets/grosselin_scChIP/{sample}/barcodes/mapping/genome/{sample}.bam"
  params:
    SRA = "{sample}",
    out_dir = "results/other_datasets/grosselin_scChIP/{sample}/barcodes",
    config = os.path.dirname(workflow.basedir) + "/config/CONFIG_MB_scChIP"
  threads: 56
  shell:
    "(./scChIPseq_DataEngineering/bin/schip_processing.sh -f {input.fw} -r {input.rev} -c {params.config} -o {params.out_dir}; touch {output.dummy})"

rule sort_genome_bam:
  input:
    "results/other_datasets/grosselin_scChIP/{sample}/barcodes/mapping/genome/{sample}.bam"
  output:
    "results/other_datasets/grosselin_scChIP/{sample}/barcodes/mapping/genome/possorted_{sample}.bam"
  threads: 56
  shell:
    "samtools sort {input} -o {output} -@ {threads}"



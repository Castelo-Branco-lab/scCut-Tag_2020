rule fastq_dump:
  output:
    fastq_1 = "results/other_datasets/grosselin_scChIP/{sample}/fastq/{sample}_1.fastq.gz",
    fastq_2 = "results/other_datasets/grosselin_scChIP/{sample}/fastq/{sample}_2.fastq.gz",
  params:
    SRA = "{sample}",
    out_dir = "results/other_datasets/grosselin_scChIP/{sample}/fastq/"
  threads: 32
  shell:
    """
    fasterq-dump --split-files --threads {threads} --progress --outdir {params.out_dir} {params.SRA} && gzip {params.out_dir}*.fastq
    """


rule map_barcodes:
  input:
    fw="results/other_datasets/grosselin_scChIP/{sample}/fastq/{sample}_1.fastq.gz",
    rev="results/other_datasets/grosselin_scChIP/{sample}/fastq/{sample}_2.fastq.gz"
  output:
    barcodes="results/other_datasets/grosselin_scChIP/{sample}/barcodes/mapping/barcode/{sample}_read_barcodes.txt",
    #directory("{sample}/barcodes/"),
    dummy     = "results/other_datasets/grosselin_scChIP/{sample}/barcodes/out.txt",
    genome    = "results/other_datasets/grosselin_scChIP/{sample}/barcodes/mapping/genome/{sample}.bam",
    bam_final = "results/other_datasets/grosselin_scChIP/{sample}/barcodes/mapping/{sample}_flagged_rmPCR.bam",
    bam_index = "results/other_datasets/grosselin_scChIP/{sample}/barcodes/mapping/{sample}_flagged_rmPCR.bam.bai",
  params:
    SRA = "{sample}",
    out_dir = "results/other_datasets/grosselin_scChIP/{sample}/barcodes",
    config = os.path.dirname(workflow.basedir) + "/config/CONFIG_MB_scChIP"
  threads: 32
  shell:
    os.path.dirname(workflow.basedir) + "/scChIPseq_DataEngineering/bin/schip_processing.sh -f {input.fw} -r {input.rev} -c {params.config} -o {params.out_dir}; touch {output.dummy}"

rule bam_to_bw_grosselin:
  input:
    bam = "results/other_datasets/grosselin_scChIP/{sample}/barcodes/mapping/{sample}_flagged_rmPCR.bam",
    bam_index = "results/other_datasets/grosselin_scChIP/{sample}/barcodes/mapping/{sample}_flagged_rmPCR.bam.bai",
  output:
    "results/other_datasets/grosselin_scChIP/{sample}/bigwig/{sample}.bw"
  threads: 32
  shell:
    "bamCoverage -b {input.bam} -o {output} -p {threads} --ignoreDuplicates --binSize 10"
  
rule call_peaks_grosselin:
  input:
    bam = "results/other_datasets/grosselin_scChIP/{sample}/barcodes/mapping/{sample}_flagged_rmPCR.bam",
  output:
    directory("results/other_datasets/grosselin_scChIP/{sample}/macs/{sample}/")
  params:
    outdir = "results/other_datasets/grosselin_scChIP/{sample}/macs/{sample}/",
    SRA    = "{sample}"
  shell:
    "macs2 callpeak -t {input} -g mm -f BAM --outdir {params.outdir} --nomodel -n {params.SRA} --max-gap 2500"

rule plot_fingerprint_grosselin:
  input:
    expand("results/other_datasets/grosselin_scChIP/{SRA}/barcodes/mapping/genome/possorted_{SRA}.bam",SRA = config['grosselin']['scChIP'])
  output:
    "results/other_datasets/fingerprint_analysis/Grosselin_fingerprint.txt",
  threads: 16
  shell:
    "plotFingerprint --ignoreDuplicates --outRawCounts {output} -b {input} -p 16"


  


